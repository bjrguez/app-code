library(shiny)

# Define UI for application that draws a histogram
ui <- fluidPage(
   # Application title
   titlePanel("Predict Horsepower/Displacement from MPG"),
   sidebarLayout(
      sidebarPanel(
        h4("Instructions"),
        h5("Graph number 1 shows the interaction between the 
            variables MPG (Miles / gallon) and HP (horsepower).
           Graph number 2 shows the interaction between the 
            variables MPG (Miles / gallon) and disp (displacement).
           You can play with the regression models in each of the graphs."),
        h4("--"), 
        
        sliderInput("sliderMPG", "Graph 1: mpg vs hp", 10, 35, value=20),
         checkboxInput("showModel1", "Show/Hide Model 1", value= TRUE),
         checkboxInput("showModel2", "Show/Hide Model 2", value= TRUE),
         
         h4("--"),
         
         sliderInput("sliderMPG2", "Graph 2: mpg vs disp", 10, 35, value=20),
         checkboxInput("showModel3", "Show/Hide Model 1", value= TRUE),
         checkboxInput("showModel4", "Show/Hide Model 2", value= TRUE),
        
         h4("--"),
         h5("autor: Brenda Rodriguez"),
         h5("date: 01-28-2018")
      ),
      
      # Show a plot of the generated distribution
      mainPanel(
        #  plot 1 mpg vs hp
        h2("plot 1 mpg vs hp"),
        plotOutput("plot1"),
        h4("Predicted Horsepower from Model 1:"),
        textOutput("pred1"),
        h4("Predicted Horsepower from Model 2:"),
        textOutput("pred2"),
         
        # plot 2 mpg vs disp
        h3("-----------------------------------------------------------"),
        h2("plot 1 mpg vs disp"),
        plotOutput("plot2"),
        h4("Predicted Displacement from Model 1:"),
        textOutput("pred3"),
        h4("Predicted Displacement from Model 2:"),
        textOutput("pred4")
      )
   )
)

# Define server logic required to draw a histogram
server <- function(input, output) {
  #####################################
  # plot 1 mpg vs hp
  #####################################
  
   mtcars$mpgsp<- ifelse(mtcars$mpg - 20 > 0, mtcars$mpg - 20, 0)
   model1 <- lm(hp ~ mpg, data = mtcars)
   model2 <- lm(hp ~ mpgsp + mpg, data = mtcars)
   
   model1pred <- reactive({
     mpgInput <- input$sliderMPG
     predict(model1, newdata= data.frame(mpg= mpgInput))
   })
   
   model2pred <- reactive({
     mpgInput <- input$sliderMPG
     predict(model2, newdata= data.frame(mpg= mpgInput, 
                                        mpgsp= ifelse(mpgInput - 20 > 0, 
                                                      mpgInput - 20, 0)))
   })
   
   output$plot1 <- renderPlot({
     mpgInput <- input$sliderMPG
     
     plot(mtcars$mpg, mtcars$hp, 
          xlab= "Miles per gallon",
          ylab= "Horse power", 
          bty= "n", pch= 16,
          xlim= c(10, 35), ylim= c(50, 350))
     
     if(input$showModel1){ 
       abline(model1, col= "red", lwd= 2) 
      }
     
     if(input$showModel2){
       model2lines<- predict(model2, newdata= data.frame(
         mpg= 10:35, mpgsp= ifelse(10:35 - 20 > 0, 10:35 - 20, 0)
       ))
       lines(10:35, model2lines, col= "blue", lwd= 2)
     }
     
     legend(25, 250, c("Model 1 prediction", "Model 2 prediction"), 
            pch= 16, col= c("red", "blue"), bty= "n", cex = 1.2)
     points(mpgInput, model1pred(), col="red", pch=16, cex=2)
     points(mpgInput, model2pred(), col="red", pch=16, cex=2)
   })
   
   output$pred1 <- renderText({ model1pred() })
   output$pred2 <- renderText({ model2pred() })

   #####################################
   # plot 2 mpg vs disp
   #####################################

   mtcars$mpgsp<- ifelse(mtcars$mpg - 20 > 0, mtcars$mpg - 20, 0)
   model3 <- lm(disp ~ mpg, data= mtcars)
   model4 <- lm(disp ~ mpgsp + mpg, data= mtcars)
   
   model3pred <- reactive({
     mpgInput <- input$sliderMPG2
     predict(model3, newdata= data.frame(mpg= mpgInput))
   })
   
   model4pred <- reactive({
     mpgInput <- input$sliderMPG2
     predict(model4, newdata= data.frame(mpg= mpgInput, 
                                         mpgsp= ifelse(mpgInput - 20 > 0, 
                                                       mpgInput - 20, 0)))
   })
   
   output$plot2 <- renderPlot({
     mpgInput <- input$sliderMPG2
     
     plot(mtcars$mpg, mtcars$disp, 
          xlab= "Miles per gallon",
          ylab= "Displacement", 
          bty= "n", pch= 16,
          xlim= c(10, 35), ylim= c(50, 450))
     
     if(input$showModel3){ 
       abline(model3, col= "red", lwd= 2) 
     }
     
     if(input$showModel4){
       model4lines<- predict(model4, newdata= data.frame(
         mpg= 10:35, mpgsp= ifelse(10:35 - 20 > 0, 10:35 - 20, 0)
       ))
       lines(10:35, model4lines, col= "blue", lwd= 2)
     }
     
     legend(25, 250, c("Model 1 prediction", "Model 2 prediction"), 
            pch= 16, col= c("red", "blue"), bty= "n", cex = 1.2)
     points(mpgInput, model3pred(), col="red", pch=16, cex=2)
     points(mpgInput, model4pred(), col="red", pch=16, cex=2)
   })
   
   output$pred3 <- renderText({ model3pred() })
   output$pred4 <- renderText({ model4pred() })
   
}

# Run the application 
shinyApp(ui = ui, server = server)
